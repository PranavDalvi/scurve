#!/usr/bin/env python
import os.path, math, string, sys
import scurve
from scurve import progress, utils, draw
from PIL import Image, ImageDraw 

class _Color:
    def __init__(self, data, block):
        self.data, self.block = data, block
        s = list(set(data))
        s.sort()
        self.symbol_map = {v: i for (i, v) in enumerate(s)}

    def __len__(self):
        return len(self.data)

    def point(self, x):
        if self.block and (self.block[0] <= x < self.block[1]):
            return self.block[2]
        else:
            return self.getPoint(x)

class ColorGradient(_Color):
    def getPoint(self, x):
        c = self.data[x] / 255.0
        return [
            int(255 * c),
            int(255 * c),
            int(255 * c)
        ]


class ColorHilbert(_Color):
    def __init__(self, data, block):
        super().__init__(data, block)
        self.csource = scurve.fromSize("hilbert", 3, 256 ** 3)
        self.step = len(self.csource) / float(len(self.symbol_map))

    def getPoint(self, x):
        c = self.symbol_map[self.data[x]]
        return self.csource.point(int(c * self.step))

class ColorClass(_Color):
    def getPoint(self, x):
        c = self.data[x]
        if c == 0x00:
            return [0, 0, 0]  # Black for 0x00
        elif 0x01 <= c <= 0x1F:
            return [77, 175, 74]  # Green for low 
        elif 0x20 <= c <= 0x7E:
            return [16, 114, 184]  # Blue for ASCII
        elif 0x7F <= c < 0xFF:
            return [228, 26, 28]  # Red for high
        elif c == 0xFF:
            return [255, 255, 255]  # White for 0xFF

class ColorEntropy(_Color):
    def getPoint(self, x):
        e = utils.entropy(self.data, 32, x, len(self.symbol_map))

        def curve(v):
            f = (4 * v - 4 * v ** 2) ** 4
            return max(f, 0)

        r = curve(e - 0.5) if e > 0.5 else 0
        b = e ** 2
        return [int(255 * r), 0, int(255 * b)]

def drawmap_unrolled(map, size, csource, name, prog):
    prog.set_target((size ** 2) * 4)
    map = scurve.fromSize(map, 2, size ** 2)
    c = Image.new("RGB", (size, size * 4))
    cd = ImageDraw.Draw(c)
    step = len(csource) / float(len(map) * 4)

    for quad in range(4):
        for i, p in enumerate(map):
            off = (i + (quad * size ** 2))
            color = csource.point(int(off * step))
            x, y = tuple(p)
            cd.point((x, y + (size * quad)), fill=tuple(color))
            prog.tick(i)

    c.save(name)

def drawmap_square(map, size, csource, name, prog):
    prog.set_target((size ** 2))
    map = scurve.fromSize(map, 2, size ** 2)
    c = Image.new("RGB", map.dimensions())
    cd = ImageDraw.Draw(c)
    step = len(csource) / float(len(map))

    for i, p in enumerate(map):
        color = csource.point(int(i * step))
        cd.point(tuple(p), fill=tuple(color))
        prog.tick(i)

    c.save(name)

def main():
    from optparse import OptionParser
    parser = OptionParser(
        usage="%prog [options] infile [output]",
        version="%prog 0.1",
    )
    parser.add_option(
    "-p", "--progress", action="store_true", default=False,
    dest="progress",
    help="Show progress bar during processing."
    )

    parser.add_option(
        "-b", "--block", action="store",
        dest="block", default=None,
        help="Mark a block of data with a specified color. Format: hexstartaddr:hexendaddr[:hexcolor]"
    )
    parser.add_option(
        "-c", "--color", action="store",
        type="choice", dest="color", default="class",
        choices=["class", "hilbert", "entropy", "gradient"],
        help="Color map."
    )
    parser.add_option(
        "-m", "--map", action="store",
        type="choice", dest="map", default="hilbert",
        choices=sorted(scurve.curveMap.keys()),
        help="Pixel layout map. Can be any supported curve."
    )
    parser.add_option(
        "-s", "--size", action="store",
        type="int", dest="size", default=256,
        help="Image width in pixels."
    )
    parser.add_option(
        "-t", "--type", type="choice",
        dest="type", default="unrolled",
        choices=["unrolled", "square"],
        help="Image aspect ratio - square (1x1) or unrolled (1x4)"
    )

    options, args = parser.parse_args()
    if len(args) not in [1, 2]:
        parser.error("Please specify input and output file.")

    with open(args[0], 'rb') as f:
        d = f.read()

    dst = args[1] if len(args) == 2 else os.path.splitext(os.path.basename(args[0]))[0] + ".png"

    block = None
    if options.color == "class":
        csource = ColorClass(d, block)
    elif options.color == "hilbert":
        csource = ColorHilbert(d, block)
    elif options.color == "gradient":
        csource = ColorGradient(d, block)
    else:
        csource = ColorEntropy(d, block)

    prog = progress.Progress(None) if not options.progress else progress.Dummy()

    if options.type == "unrolled":
        drawmap_unrolled(options.map, options.size, csource, dst, prog)
    elif options.type == "square":
        drawmap_square(options.map, options.size, csource, dst, prog)
    prog.clear()

if __name__ == "__main__":
    main()
